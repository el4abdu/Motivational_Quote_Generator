// This file stores quotes generated by AI
let aiQuotes = [];

// Function to add a new AI-generated quote
function addAiQuote(text, author, categories, language) {
  try {
    if (!text) {
      console.error('Cannot add AI quote with empty text');
      throw new Error('Quote text is required');
    }
    
    const newQuote = {
      id: generateUniqueId(),
      text: text,
      author: author || 'AI Generated',
      categories: Array.isArray(categories) ? categories : ['inspiration'],
      language: language || 'en',
      created: new Date().toISOString(),
      approved: false
    };
    
    aiQuotes.push(newQuote);
    
    // Save to localStorage for persistence
    try {
      saveAiQuotesToStorage();
    } catch (storageError) {
      console.error('Error saving AI quotes to storage:', storageError);
      // Continue even if storage fails
    }
    
    return newQuote;
  } catch (error) {
    console.error('Error in addAiQuote:', error);
    // Return a basic fallback quote instead of throwing
    return {
      id: generateUniqueId(),
      text: text || 'Every moment is a fresh beginning.',
      author: author || 'AI Generated (Fallback)',
      categories: Array.isArray(categories) ? categories : ['inspiration'],
      language: language || 'en',
      created: new Date().toISOString(),
      approved: false
    };
  }
}

// Generate a unique ID for each quote
function generateUniqueId() {
  return 'ai_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

// Save AI quotes to localStorage
function saveAiQuotesToStorage() {
  try {
    localStorage.setItem('aiQuotes', JSON.stringify(aiQuotes));
  } catch (e) {
    console.error('Error saving to localStorage:', e);
    // Silent fail - don't break the app if localStorage isn't available
  }
}

// Load AI quotes from localStorage
function loadAiQuotesFromStorage() {
  try {
    const stored = localStorage.getItem('aiQuotes');
    if (stored) {
      try {
        aiQuotes = JSON.parse(stored);
      } catch (e) {
        console.error('Error parsing AI quotes from storage:', e);
        aiQuotes = [];
      }
    }
  } catch (e) {
    console.error('Error accessing localStorage:', e);
    aiQuotes = [];
  }
}

// Get AI quotes by language
function getAiQuotesByLanguage(language) {
  return aiQuotes.filter(quote => quote.language === language);
}

// Get approved AI quotes
function getApprovedAiQuotes() {
  return aiQuotes.filter(quote => quote.approved);
}

// Init - load stored quotes when the file loads
loadAiQuotesFromStorage(); 